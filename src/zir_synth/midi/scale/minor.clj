(ns zir-synth.midi.scale.minor
  (:gen-class))

(defn- minor-semi-notes [] [2 1 2 2 1 2 2])
(defn- minor-scale [] (reduce + 0 (minor-semi-notes)))
(defn- minor-steps [] [:T :S :T :T :S :T :T])

(defn a-minor [] [:A :B :C :D :E :F :G :A])
(defn a-sharp-minor [] [:A# :B# :C# :D# :F :F# :G# :A#])
(defn b-flat-minor [] [:Bb :C :Db :Eb :F :Gb :Ab :Bb])
(defn b-minor [] [:B :C# :D :E :F# :G :A :B])
(defn c-minor [] [:C :D :Eb :F :G :Ab :Bb :C])
(defn c-sharp-minor [] [:C# :D# :E :F# :G# :A :B :C#])
(defn d-flat-minor [] [:Db :Eb :Fb :Gb :Ab :A :B :Db])
(defn d-minor [] [:D :E :F :G :A :Bb :C :D])
(defn d-sharp-minor [] [:D# :E# :F# :G# :A# :B :C# :D#])
(defn e-flat-minor [] [:Eb :F :Gb :Ab :Bb :Cb :Db :Eb])
(defn e-minor [] [:E :F# :G :A :B :C :D :E])
(defn f-minor [] [:F :G :Ab :Bb :C :Db :Eb :F])
(defn f-sharp-minor [] [:F# :G# :A :B :C# :D :E :F#])
(defn g-flat-minor [] [:Gb :Ab :Bbb :Cb :Db :Ebb :Fb :Gb])
(defn g-minor [] [:G :A :Bb :C :D :Eb :F :G])
(defn g-sharp-minor [] [:G# :A# :B :C# :D# :E :F# :G#])
(defn a-flat-minor [] [:Ab :Bb :Cb :Db :Eb :Fb :Gb :Ab])

(defn- minors [] [(a-minor) (a-sharp-minor) (b-flat-minor)
                 (b-minor)
                 (c-minor) (c-sharp-minor) (d-flat-minor)
                 (d-minor) (d-sharp-minor) (e-flat-minor)
                 (e-minor)
                 (f-minor) (f-sharp-minor) (g-flat-minor)
                 (g-minor) (g-sharp-minor) (a-flat-minor)])

(defn scale [key-note] (first (filter (fn [scale] (= key-note (first scale))) (minors))))
